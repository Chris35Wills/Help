GAWK notes
==========

Example command:
`gawk '{if($1 == "width:")			printf("%d\n", $2)}' < $this_dem_par`

The above calls the gawk library up
{if($1 == "width:")	 <- this means "if column 1 is equal to width"
printf("%d\n", $2)}' <- this means "print as a decimal integer (%d) the new
						character (\n) found in column 2 ($2)
< $this_dem_par      <- this means "acccording to the file specifed by variable this_dem_par

Get colums from file and put in another file
============================================

## Inside csh script
## Takes the 1st and 2nd colums from file $datset and prints them, with a new line between each, into test_list.xyz
## SEE: http://web.mit.edu/gnu/doc/html/gawk_6.html

gawk 'BEGIN { ORS = "\n"} { print $1, $2 }' $dataset > ~/Desktop/test_list.xyz
nedit ~/Desktop/test_list.xyz


Examples of how to use a gawk command in a csh script:
======================================================

		  #######################
		  		  ####################### The echo pipes in variables to a gawk printf function
				  ####################### The printf function then prints them out (after doing some maths)
		  #######################

		  set map_br_northing = `echo $map_tl_northing $npost $map_lines | gawk '{printf("%d\n", $1 + $2*$3)}'`
		  
		  #######################
		  		  ####################### The -v establish variables that can be used in gawk (e.g. tl_northing) taken from csh (e.g. $tl_northing)
		  		  ####################### The NF is a keyword to assess how many fields there are ina  record (see http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/) 
				  ####################### The '{if......}' \ part states the formatting and to which variables that should be set to 
		  		  ####################### "< file" is the file passed into gawk
 		  		  ####################### "> file" is the file passed out
	      #######################

          if(1) then    # convert to local coordinates
                gawk \
                    -v tl_northing=$tl_northing \
                    -v tl_easting=$tl_easting \
                    -v npost=$npost \
                    -v epost=$epost \
                    '{if(NF==3) printf("%10d\t%10d\t%2d\n", tl_easting+($1*epost), tl_northing+($2*npost), $3)}' \
                    < areas/$mli_dir/$glacier.$area.txt \
                    > areas/$mli_dir/$glacier.$area.map.txt
                endif

Doing simple maths using gawk (you can't do much mathematically in csh):
========================================================================

set lines = `echo $tl_northing $br_northing $post | gawk '{printf("%d\n", ($1 - $2) / $3 )}'`
		echo "lines: $lines"

	## So you echo some pre-defined variable
	## Pipe them into gawk (using the |) 
	## Process them with a gawk tool (notice the variable numbers match the variable order that you piped in so $1 is $tl_northing)

Extract data from complex lines (with funny separators)
=======================================================	
	
	set utm_zone = `gawk '{if($1 == "map"); split($0, aaa, ","); printf("%3.0f\n", aaa[8])}'< $hyper_file`
		echo "utm_zone: $utm_zone"
	
	## $0 denotes the whole line
	## split($0, aaa, ",") -- this means that you split the whole line at separator "," and put all parts of it into an array (using the ","
	   separator
	   
	## Assuming $0 == map info = {UTM,1,1,566295,7134507,3,3,22,North,WGS84,units=Meters}
	## This will reuslt in extraction of the value "22"
	
Leading zeros and string manipulation with multiple separators
==============================================================

See the following worked example:
	
	set dataset = mosaic_scripted_b5.dem ## <-- want this to be *b005.dem
	
	## Cuts the string and selects the data between two delimiters - "b" and "." - -F is the delimitter setting - having the 
	## delimiters declared in square brackets means the delimiters will be declared separately - -Fb. would only separate a 
	## variable at every "b."
	
	set date2 = `echo $dataset | awk -F'[b.]' '{print $2}'`
	echo "date2 = $date2" 
	>> date2 = 5
	
	set date2_leading = `echo $date2 | awk '{printf("%03d\n",$1)}'`
	echo "date2 with zeros = $date2_leading"
	>> date2 = 005
	
	mv mosaic_scripted_b5.dem mosaic_scripted_b"$date2_leading".dem  
	
	
=======================================================
csh string manipulation: length, substring, index ...
=======================================================

1) get string length
set object = "Processing NGC 2345"
set nchar = `echo $object | awk '{print length($0)}'`

2) substring
One method uses the awk function substr(s,c,n). This returns the substring from string s starting from character position c up to a maximum length of n characters. If n is not supplied, the rest of the string from c is returned.

set caption = "Processing NGC 2345."
set object = `echo $caption | awk '{print substr($0,12,8)}'` # = "NGC 2345"
set objec_ = `echo $caption | awk '{print substr($0,16)}'` # = "2345."

Another method uses the UNIX cut command. It too can specify a range or ranges of characters. It can also extract fields separated by nominated characters.
The -d qualifier specifies the delimiter between associated data (otherwise called fields). Note the the space delimiter must be quoted. The -f qualifier selects the fields. You can also select character columns with the -c qualifier. Both -c and -f can comprise a comma-separated list of individual values and/or ranges of values separated by a hyphen. As you might expect, cut can take its input from files too.
set places = ( Jupiter "Eagle Nebula" "Gamma quadrant" )

set cut1 = `echo $places | cut -d ' ' -f1,3` # = "Jupiter Nebula"
set cut2 = `echo $places[3] | cut -d a -f2` # = "mm"
set cut3 = `echo $places | cut -c3,11` # = "pg"

3) find the index of a substring
This requires the awk function index. This returns zero if the string could not be located. Note that comparisons are case sensitive.

set catal = "NGC "
set number = 2345
set object = "Processing $catal$number."
set cind = `echo $object | awk '{print index($0,"ngc")}'` # = 0
set cind = `echo $object | awk '{print index($0,"NGC")}'` # = 12

4) extract details from a path and file string:

###
foreach dataset ( \
	Lidar_time_correction/Helheim/single_strips/"$date"_lidar/xyz/*.xyz \
	)
	
	echo $dataset
	set file_name = `basename $dataset .xyz`
	set strip_number = `echo $file_name | awk '{printf(substr($file_name, length($file_name)-1))}'` 
	## gets the last two values of the string $file_name

	echo "Date: $date"
	echo $file_name
	echo "Strip number: $strip_number"
###
	
Prints out:
Lidar_time_correction/Helheim/single_strips/222a_lidar/xyz/Helheim_222a_elevation_16.xyz
Date: 222a
Helheim_222a_elevation_16
Strip number: 16

A good csh cook book is found http://star-www.rl.ac.uk/star/docs/sc4.htx/sc4.html. I extracted a few examples here. 
